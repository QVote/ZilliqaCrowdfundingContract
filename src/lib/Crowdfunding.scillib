type Error =
| AdminValidationFailed
| StagingAdminNotExist
| StagingAdminValidationFailed
| ProjectNotRegistered
| BeneficiaryPaymentsExhausted
| BeneficiaryAlreadyRegistered

let make_error =
fun (result: Error) =>
let result_code =
match result with
| AdminValidationFailed => Int32 -1
| StagingAdminNotExist => Int32 -2
| StagingAdminValidationFailed => Int32 -3
| ProjectNotRegistered => Int32 -4
| BeneficiaryPaymentsExhausted => Int32 -5
| BeneficiaryAlreadyRegistered => Int32 -6
end
in
{ _exception: "Error"; code: result_code }

let addfunds_tag = "AddFunds"

let one_msg =
fun (m : Message) =>
let e = Nil {Message} in
Cons {Message} m e

let uint128_list_head = @list_head Uint128

let uint128_list_tail = @list_tail Uint128

let nil_uint128 = Nil {Uint128}
