scilla_version 0
import ListUtils IntUtils PairUtils
library Crowdfunding

type Error =
| AdminValidationFailed
| StagingAdminNotExist
| StagingAdminValidationFailed
| ProjectNotRegistered
| BeneficiaryPaymentsExhausted
| BeneficiaryAlreadyRegistered

let make_error =
fun (result: Error) =>
let result_code =
match result with
| AdminValidationFailed => Int32 -1
| StagingAdminNotExist => Int32 -2
| StagingAdminValidationFailed => Int32 -3
| ProjectNotRegistered => Int32 -4
| BeneficiaryPaymentsExhausted => Int32 -5
| BeneficiaryAlreadyRegistered => Int32 -6
end
in
{ _exception: "Error"; code: result_code }

let one_msg =
fun (m : Message) =>
let e = Nil {Message} in
Cons {Message} m e

let addfunds_tag = "AddFunds"

let uint128_list_head = @list_head Uint128

let uint128_list_tail = @list_tail Uint128

let nil_uint128 = Nil {Uint128}

contract Crowdfunding(
    init_admin: ByStr20
)
(* Current contract admin *)
field contractadmin: ByStr20  = init_admin
(* Admin that can be claimed by existing address *)
field stagingcontractadmin: Option ByStr20 = None {ByStr20}
(* Registered projects and their payments *)
field beneficiary_to_payments: Map ByStr20 (List Uint128) = Emp ByStr20 (List Uint128)

procedure ThrowError(err: Error)
    e = make_error err;
    throw e
end
procedure IsAdmin(initiator: ByStr20)
    contractadmin_tmp <- contractadmin;
    is_admin = builtin eq initiator contractadmin_tmp;
    match is_admin with
    | True  =>
    | False =>
        e = AdminValidationFailed;
        ThrowError e
    end
end
procedure TransferFunds(tag: String, amt: Uint128, recipient: ByStr20)
    msg = {_tag: tag; _recipient: recipient; _amount: amt};
    msgs = one_msg msg;
    send msgs
end
(* Update staged admin *)
transition UpdateAdmin(admin: ByStr20)
    IsAdmin _sender;
    staging_admin = Some {ByStr20} admin;
    stagingcontractadmin := staging_admin
end
(* Staged admin can claim the staged admin and become admin *)
transition ClaimAdmin()
    staging_admin <- stagingcontractadmin;
    match staging_admin with
    | Some admin =>
        is_valid = builtin eq _sender admin;
        match is_valid with
        | True =>
            contractadmin := admin;
            staging_admin = None {ByStr20};
            stagingcontractadmin := staging_admin;
            e = { _eventname: "ClaimAdmin"; new_admin: admin };
            event e
        | False =>
            e = StagingAdminValidationFailed;
            ThrowError e
        end
    | None =>
        e = StagingAdminNotExist;
        ThrowError e
    end
end
(* withdraw zils *)
(* only if is admin  *)
transition DrainContractBalance(amt: Uint128)
    IsAdmin _sender;
    bal <- _balance;
    TransferFunds addfunds_tag bal _sender;
    e = { _eventname: "DrainContractBalance"; to: _sender; amount: amt};
    event e
end
(* Add funds to the contract *)
transition AddFunds()
    accept;
    e = { _eventname : "Funds deposit "; funder : _sender };
    event e
end
(* only if is admin  *)
transition PayRegisteredProject(beneficiary: ByStr20)
    IsAdmin _sender;
    maybe_payments <- beneficiary_to_payments[beneficiary];
    match maybe_payments with
    | Some payments =>
        (* take payment from the head of the list *)
        maybe_head = uint128_list_head payments;
        match maybe_head with
        | Some amt =>
            (* send payment to beneficiary *)
            TransferFunds addfunds_tag amt beneficiary;
            e = { _eventname : "PayRegisteredProject"; beneficiary: beneficiary; amount: amt};
            event e;
            maybe_tail = uint128_list_tail payments;
            (* remove the sent payment from payments list in the map *)
            match maybe_tail with
            | Some remaining_payments => 
                beneficiary_to_payments[beneficiary] := remaining_payments
            | None =>
                beneficiary_to_payments[beneficiary] := nil_uint128
            end
        | None =>
            e = BeneficiaryPaymentsExhausted;
            ThrowError e
        end
    | None =>
        e = ProjectNotRegistered;
        ThrowError e
    end
end
(* only if is admin  *)
(* can register beneficiary only once! *)
transition RegisterBeneficiary(beneficiary: ByStr20, payments: List Uint128)
    IsAdmin _sender;
    maybe_payments <- beneficiary_to_payments[beneficiary];
    match maybe_payments with
    | Some some_already_registered_payments => 
        e = BeneficiaryAlreadyRegistered;
        ThrowError e
    | None => 
        beneficiary_to_payments[beneficiary] := payments;
        e = { _eventname : "RegisterBeneficiary"; beneficiary: beneficiary; payments: payments};
        event e
    end
end